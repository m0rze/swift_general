import Foundation
import UIKit

enum Windows {
    case open, close
}

enum Engine {
    case on, off
}

enum Colors: String {
    
    case black = "—á–µ—Ä–Ω—ã–π"
    case white = "–±–µ–ª—ã–π"
    case blue = "—Å–∏–Ω–∏–π"
    case yellow = "–∂–µ–ª—Ç—ã–π"
    case red = "–∫—Ä–∞—Å–Ω—ã–π"
    
}

protocol Car {
    
    var model: String {get}
    var year: Int {get}
    var color: Colors {get set}
    var engineState: Engine {get set}
    
    var windowsState: Windows {get set}
    
    mutating func pushEngineButton()
    mutating func windowsAction()
    mutating func changeColor(to newColor: Colors)
    
    init(model: String, year: Int, color: Colors)
}

class MainCarData: Car {
    
    var model: String
    
    var year: Int
    
    var color: Colors
    
    var engineState: Engine = .off
    
    var windowsState: Windows = .close
    
    required init(model: String, year: Int, color: Colors) {
        self.model = model
        self.year = year
        self.color = color
    }
    
}

class SportCar: MainCarData {
    
    var maxSpeed: Int
    
    init(model: String, year: Int, color: Colors, maxSpeed: Int) {
        self.maxSpeed = maxSpeed
        super.init(model: model, year: year, color: color)
    }
    
    required init(model: String, year: Int, color: Colors) {
        fatalError("init(model:year:color:) has not been implemented")
    }
    
}

class TrunkCar: MainCarData {
    
    enum Cities: String {
        case moscow = "–ú–æ—Å–∫–≤–∞"
        case sochi  = "–°–æ—á–∏"
        case piter = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        case kazan = "–ö–∞–∑–∞–Ω—å"
        case tumen = "–¢—é–º–µ–Ω—å"
    }
    
    var allCargoValue: Double
    var currentCargoValue: Double = 0.0
    
    var gpsTrack: [Cities] = []
    
    init(model: String, year: Int, color: Colors, allCargoValue: Double) {
        self.allCargoValue = allCargoValue
        super.init(model: model, year: year, color: color)
    }
    
    required init(model: String, year: Int, color: Colors) {
        fatalError("init(model:year:color:) has not been implemented")
    }
    
    func addCargo(newCargo: Double) {
        switch newCargo {
        case let newCargo where newCargo + self.currentCargoValue < self.allCargoValue:
            print("–í –∫—É–∑–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ \(newCargo) —Ç–æ–Ω–Ω –≥—Ä—É–∑–∞")
            self.currentCargoValue += newCargo
        case let newCargo where newCargo + self.currentCargoValue > self.allCargoValue:
            print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞, –Ω–µ –≤–ª–µ–∑–µ—Ç")
        default:
            self.currentCargoValue += newCargo
            print("–ì—Ä—É–∑ –≤–º–µ—Å—Ç–∏–ª—Å—è, –∫—É–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–æ–Ω")
            
        }
    }
    
    func removeCargo(value: Double){
        
        switch value {
        case let value where self.currentCargoValue - value < 0:
            print("–°—Ç–æ–ª—å–∫–æ –≥—Ä—É–∑–∞ –Ω–µ—Ç –≤ –∫—É–∑–æ–≤–µ, –ø–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏")
        default:
            self.currentCargoValue -= value
            print("–ì—Ä—É–∑–∞ –ø–æ–¥—É–±–∞–≤–∏–ª–æ—Å—å")
        }
    }
    
    func addGPSPoint(to point: Cities){
        self.gpsTrack.append(point)
    }
    
    func whereAreWeGoing(){
        if self.gpsTrack.count == 0 {
            print("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–¥–∞–Ω")
            return
        }
        var gpsCityNames: String = ""
        var i = 0
        for oneCity in gpsTrack {
            if i == gpsTrack.count - 1 {
                gpsCityNames += "\(oneCity.rawValue)"
            } else {
                gpsCityNames += "\(oneCity.rawValue)-"
            }
            
            i += 1
        }
        print("–ù–∞—à –ø—É—Ç—å –ø—Ä–æ–ª–µ–≥–∞–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –≥–æ—Ä–æ–¥–∞–º: \(gpsCityNames)")
        
    }
    
}

extension Car {
    mutating func pushEngineButton() {
        switch self.engineState {
        case .off:
            self.engineState = .on
            print("–ó–∞–ø—É—Å—Ç–∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
        case .on:
            self.engineState = .off
            print("–í—ã–∫–ª—é—á–∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—å")
        }
    }
    
    mutating func windowsAction() {
        switch self.windowsState {
        case .open:
            self.windowsState = .close
            print("–ó–∞–∫—Ä—ã–ª–∏ –æ–∫–Ω–∞")
        case .close:
            self.windowsState = .open
            print("–û—Ç–∫—Ä—ã–ª–∏ –æ–∫–Ω–∞")
        }
    }
    
    mutating func changeColor(to newColor: Colors) {
        self.color = newColor
        print("–ü–µ—Ä–µ–∫—Ä–∞—à–µ–Ω–æ –≤ \(newColor.rawValue) —Ü–≤–µ—Ç")
    }
}

extension SportCar: CustomStringConvertible {
    var description: String {
        return("\nüèé –ê–≤—Ç–æ–º–æ–±–∏–ª—å \(model) \(year) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å \(maxSpeed) –∫–º/—á, —Ü–≤–µ—Ç \(color.rawValue)\n")
    }
}

extension TrunkCar: CustomStringConvertible {
    var description: String {
        var icon: String = "üõª"
        if currentCargoValue > 0.0 {
            icon = "üöö"
        }
        return("\n\(icon) –ì—Ä—É–∑–æ–≤–∏–∫ \(model) \(year) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞, –≥—Ä—É–∑–æ–ø–æ–¥—å–µ–º–Ω–æ—Å—Ç—å—é \(allCargoValue) —Ç–æ–Ω–Ω, —Ü–≤–µ—Ç \(color.rawValue)\n")
    }
}

// ==========================================================================

var mazda = SportCar(model: "Mazda", year: 2019, color: .blue, maxSpeed: 220)
print(mazda)
mazda.pushEngineButton()
mazda.windowsAction()
mazda.windowsAction()
mazda.pushEngineButton()
mazda.changeColor(to: .yellow)
print(mazda)


var tatra = TrunkCar(model: "Tatra", year: 1978, color: .yellow, allCargoValue: 100.0)
print(tatra)
tatra.windowsAction()
tatra.pushEngineButton()
tatra.addCargo(newCargo: 98.8)
tatra.changeColor(to: .red)
print(tatra)
tatra.addGPSPoint(to: .moscow)
tatra.addGPSPoint(to: .sochi)
tatra.addGPSPoint(to: .tumen)
tatra.whereAreWeGoing()
