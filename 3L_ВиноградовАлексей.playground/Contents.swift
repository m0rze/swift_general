import UIKit

enum EngineAction {
    case start
    case stop
}

enum Window{
    case frontLeft
    case frontRight
    case rearLeft
    case rearRight
}

enum WindowsAction{
    case open
    case close
}

struct MainCarOptions {
    var model: String
    var year: Int
    var windowsState: [Window : WindowsAction] = { () -> [Window : WindowsAction] in
        var windowsState = [Window : WindowsAction]()
        windowsState[.frontLeft] = WindowsAction.close
        windowsState[.frontRight] = WindowsAction.close
        windowsState[.rearLeft] = WindowsAction.close
        windowsState[.rearRight] = WindowsAction.close
        return windowsState
    }()
    var engineState: EngineAction = .stop
    
    init(model: String, year: Int){
        self.model = model
        self.year = year
    }
    
    func showWindowsState(){
        print("   –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–æ–Ω:")
        for window in self.windowsState {
            switch window {
            case (.frontLeft, .close):
                print("     - –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            case (.frontRight, .close):
                print("     - –æ–∫–Ω–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∑–∞–∫—Ä—ã—Ç–æ")
            case (.rearLeft, .close):
                print("     - –∑–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            case (.rearRight, .close):
                print("     - –∑–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
            case (.frontLeft, .open):
                print("     - –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
            case (.frontRight, .open):
                print("     - –æ–∫–Ω–æ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–æ")
            case (.rearLeft, .open):
                print("     - –∑–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
            case (.rearRight, .open):
                print("     - –∑–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
            }
        }
    }
    
    func showEngineState(){
        print("   –°—Ç–∞—Ç—É—Å –¥–≤–∏–≥–∞—Ç–µ–ª—è:")
        switch self.engineState {
        case .stop:
            print("     –î–≤–∏–≥–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        case .start:
            print("     –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω")
        }
    }
    
}

struct SportCar {
    var icon: String = "üöó"
    var mainOptions = MainCarOptions(model: "", year: 0)
    var rearTrunkValue: Double
    var frontTrunkValue: Double = 0.0
    
    init(model: String, year: Int, rearTrunkValue: Double){
        self.mainOptions.model = model
        self.mainOptions.year = year
        self.rearTrunkValue = rearTrunkValue
    }
    
    mutating func openWindow(window: Window){
        self.mainOptions.windowsState[window] = .open
    }
    
    mutating func closeWindow(window: Window){
        self.mainOptions.windowsState[window] = .close
    }
    
    mutating func stopEngine(){
        self.mainOptions.engineState = .stop
    }
    
    mutating func startEngine(){
        self.mainOptions.engineState = .start
    }
    
    func whatAboutThisCar(){
        print("\(icon) –í–∞—à–∞ –º–∞—à–∏–Ω–∞ \(self.mainOptions.model) \(self.mainOptions.year) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞.")
        if self.rearTrunkValue < 300.0 {
            print("–ë–∞–≥–∞–∂–Ω–∏–∫ —Å–æ–≤—Å–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π - \(self.rearTrunkValue) –ª–∏—Ç—Ä–æ–≤")
        } else {
            print("–ë–∞–≥–∞–∂–Ω–∏–∫ –æ–±—ä–µ–º–æ–º \(self.rearTrunkValue) –ª–∏—Ç—Ä–æ–≤")
        }
        
        if frontTrunkValue == 0.0 {
            print("–ü–µ—Ä–µ–¥–Ω–µ–≥–æ –±–∞–≥–∞–∂–Ω–∏–∫–∞ –Ω–µ—Ç, —ç—Ç–æ –≤–∞–º –Ω–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å")
        } else {
            print("–ï—Å—Ç—å –¥–∞–∂–µ –ø–µ—Ä–µ–¥–Ω–∏–π –±–∞–≥–∞–∂–Ω–∏–∫ –æ–±—ä–µ–º–æ–º \(frontTrunkValue) –ª–∏—Ç—Ä–æ–≤")
        }
        
        self.mainOptions.showWindowsState()
        self.mainOptions.showEngineState()
        print("\n\n")
    }
}

struct TrunkCar {
    var icon: String = "üöö"
    var mainOptions = MainCarOptions(model: "", year: 0)
    var bigTrunkValue: Double
    var cargoValue: Double = 0.0
    
    init(model: String, year: Int, bigTrunkValue: Double){
        self.mainOptions.model = model
        self.mainOptions.year = year
        self.bigTrunkValue = bigTrunkValue
        self.mainOptions.windowsState[.rearLeft] = nil
        self.mainOptions.windowsState[.rearRight] = nil
    }
    
    mutating func addCargo(newCargo: Double){
        if self.cargoValue + newCargo > self.bigTrunkValue {
            print("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥—Ä—É–∑–∞, —É–±–∞–≤—å—Ç–µ \(String(format: "%.2f", self.cargoValue + newCargo - self.bigTrunkValue)) –ª–∏—Ç—Ä–∞(–æ–≤)\n")
            return
        }
        self.cargoValue += newCargo
    }
    
    mutating func removeCargo(removedCargo: Double){
        if self.cargoValue - removedCargo < 0 {
            print("–í –∫—É–∑–æ–≤–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –≥—Ä—É–∑–∞, —Ç–∞–º –≤—Å–µ–≥–æ \(String(format: "%.2f", self.cargoValue)) –ª–∏—Ç—Ä–∞(–æ–≤)\n")
            return
        }
        self.cargoValue -= removedCargo
    }
    
    mutating func openWindow(window: Window){
        if window == .rearLeft || window == .rearRight {
            print("–≠—Ç–∏—Ö –æ–∫–æ–Ω –≤ –≥—Ä—É–∑–æ–≤–∏–∫–µ –Ω–µ—Ç\n")
            return
        }
        self.mainOptions.windowsState[window] = .open
    }
    
    mutating func closeWindow(window: Window){
        if window == .rearLeft || window == .rearRight {
            print("–≠—Ç–∏—Ö –æ–∫–æ–Ω –≤ –≥—Ä—É–∑–æ–≤–∏–∫–µ –Ω–µ—Ç \n")
            return
        }
        self.mainOptions.windowsState[window] = .close
    }
    
    mutating func stopEngine(){
        self.mainOptions.engineState = .stop
    }
    
    mutating func startEngine(){
        self.mainOptions.engineState = .start
    }
    
    func whatAboutThisCar(){
        print("\(icon) –í–∞—à –≥—Ä—É–∑–æ–≤–∏–∫ \(self.mainOptions.model) \(self.mainOptions.year) –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞.")
        print("–û–±—ä–µ–º –∫—É–∑–æ–≤–∞ - \(String(format: "%.2f", self.bigTrunkValue) ) –ª–∏—Ç—Ä–æ–≤")
        print("–ì—Ä—É–∑–∞ –≤ –∫—É–∑–æ–≤–µ - \(String(format: "%.2f", self.cargoValue)) –ª–∏—Ç—Ä–æ–≤")
        self.mainOptions.showWindowsState()
        self.mainOptions.showEngineState()
        print("\n\n")
    }
}


var mazda = SportCar(model: "Mazda 6", year: 2019, rearTrunkValue: 256.8)
mazda.whatAboutThisCar()
mazda.openWindow(window: .frontLeft)
mazda.openWindow(window: .rearRight)
mazda.whatAboutThisCar()
mazda.closeWindow(window: .frontLeft)
mazda.startEngine()
mazda.whatAboutThisCar()

var tatra = TrunkCar(model: "Tatra", year: 1978, bigTrunkValue: 3912.00)
tatra.whatAboutThisCar()
tatra.openWindow(window: .rearLeft)
tatra.openWindow(window: .frontLeft)
tatra.startEngine()
tatra.whatAboutThisCar()
tatra.addCargo(newCargo: 376.98)
tatra.whatAboutThisCar()
tatra.addCargo(newCargo: 120.99)
tatra.whatAboutThisCar()
tatra.removeCargo(removedCargo: 1349.43)
tatra.removeCargo(removedCargo: 108.65)
tatra.whatAboutThisCar()
